{
	"info": {
		"_postman_id": "c0410b67-4dc4-4078-b761-738536677a0d",
		"name": "ReqRes - API CRUD (ES)",
		"description": "Colecci칩n en espa침ol para probar ReqRes (https://reqres.in) con 4 escenarios: POST, GET, PUT, DELETE.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47852062",
		"_collection_link": "https://danny-figueroa-s-team.postman.co/workspace/4acd7379-4e20-4e25-8eaa-c883e29c93b7/collection/47852062-c0410b67-4dc4-4078-b761-738536677a0d?action=share&source=collection_link&creator=47852062"
	},
	"item": [
		{
			"name": "Crear usuario (POST)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Preparar variables por defecto si no existen",
							"if (!pm.variables.get(\"username\")) pm.variables.set(\"username\", \"usuario_\" + Date.now());",
							"if (!pm.variables.get(\"email\")) pm.variables.set(\"email\", \"usuario+\" + Date.now() + \"@reqres.in\");",
							"if (!pm.variables.get(\"password\")) pm.variables.set(\"password\", \"Clave!234\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validaciones para POST",
							"pm.test(\"Estado 201 (creado)\", function () { pm.response.to.have.status(201); });",
							"pm.test(\"Respuesta es JSON\", function () { pm.response.to.be.json; });",
							"",
							"const json = pm.response.json();",
							"",
							"pm.test(\"Incluye 'id' y 'createdAt'\", function () { ",
							"    pm.expect(json).to.have.property(\"id\"); ",
							"    pm.expect(json).to.have.property(\"createdAt\"); ",
							"});",
							"",
							"if (json.id !== undefined && json.id !== null) {",
							"  pm.environment.set(\"ultimo_id_creado\", String(json.id));          ",
							"  pm.collectionVariables.set(\"ultimo_id_creado\", String(json.id));  ",
							"  console.log(\"ID guardado en env:\", pm.environment.get(\"ultimo_id_creado\"));",
							"}",
							"",
							"if (json.username) pm.test(\"username eco\", function(){ pm.expect(json.username).to.eql(pm.variables.get(\"username\")); });",
							"if (json.email) pm.test(\"email eco\", function(){ pm.expect(json.email).to.eql(pm.variables.get(\"email\")); });",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{reqres_api_key}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{reqres_api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "Crea un usuario en ReqRes. Nota: el servicio no persiste el recurso; se valida por c칩digo y campos de respuesta."
			},
			"response": []
		},
		{
			"name": "Consultar usuario existente (GET)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Validaciones para GET existente",
							"pm.test(\"Estado 200 (OK)\", function () { pm.response.to.have.status(200); });",
							"pm.test(\"Respuesta es JSON\", function () { pm.response.to.be.json; });",
							"const json = pm.response.json();",
							"pm.test(\"ID coincide con el solicitado\", function () { pm.expect(json.data.id).to.eql(parseInt(pm.variables.get(\"existing_user_id\"), 10)); });",
							"pm.test(\"Email del usuario termina en @reqres.in\", function () { pm.expect(json.data.email).to.match(/@reqres\\.in$/); });"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/users/{{existing_user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{existing_user_id}}"
					]
				},
				"description": "Consulta un usuario conocido (id=2) en ReqRes."
			},
			"response": []
		},
		{
			"name": "Actualizar usuario (PUT)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variables de actualizaci칩n por defecto",
							"pm.variables.set(\"username_actualizado\", \"usuario_editado_\" + Date.now());",
							"pm.variables.set(\"email_actualizado\", \"usuario.editado+\" + Date.now() + \"@reqres.in\");",
							"pm.variables.set(\"password_actualizado\", \"NuevaClave!234\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validaciones para PUT",
							"pm.test(\"Estado 200 (OK)\", function () { pm.response.to.have.status(200); });",
							"pm.test(\"Respuesta es JSON\", function () { pm.response.to.be.json; });",
							"const json = pm.response.json();",
							"pm.test(\"Incluye 'updatedAt'\", function () { pm.expect(json).to.have.property(\"updatedAt\"); });",
							"if (json.username) pm.test(\"username actualizado (si eco)\", function(){ pm.expect(json.username).to.eql(pm.variables.get(\"username_actualizado\")); });",
							"if (json.email) pm.test(\"email actualizado (si eco)\", function(){ pm.expect(json.email).to.eql(pm.variables.get(\"email_actualizado\")); });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{reqres_api_key}}\n",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{username_actualizado}}\",\n  \"email\": \"{{email_actualizado}}\",\n  \"password\": \"{{password_actualizado}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/users/{{existing_user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{existing_user_id}}"
					]
				},
				"description": "Actualiza un usuario (id=2). ReqRes responde 200 con 'updatedAt'."
			},
			"response": []
		},
		{
			"name": "Eliminar usuario (DELETE)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validaciones para DELETE",
							"pm.test(\"Estado 204 (No Content)\", function () { pm.response.to.have.status(204); });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{reqres_api_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/users/{{ultimo_id_creado}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{ultimo_id_creado}}"
					]
				},
				"description": "Elimina el usuario 2 (respuesta esperada 204)."
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{reqres_api_key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ultimo_id_creado",
			"value": ""
		}
	]
}